mixin modal(id, title)
    //- Modal
    .modal(
        id=id, aria-hidden="true",
        @show="MicroModal.show($el.id)",
        @close="MicroModal.close($el.id)"
    )
        .modal__overlay(tabindex="-1")
            .modal-dialog(role="dialog", aria-labelledby=`${id}-title`)
                header.mb-4
                    h2.font-semibold.uppercase(id=`${id}-title`)= title

                block

    //- Trigger
    .hidden(data-micromodal-trigger=id)

mixin note-more-options(noteRef="note")
    div(x-data="dropdown", @mousedown.away="open = false", class!=attributes.class)
        button.btn-icon(type="button", x-ref="toggleBtn")
            i.fa.fa-ellipsis

        ul.dropdown-menu(x-ref="dropdownMenu")
            li.dropdown-item(
                @click=`
                    await $store.notes.update(${noteRef}.id, {
                        is_pinned: 1 - ${noteRef}.is_pinned
                    });

                    if ($router.context.path.startsWith("/edit/")) {
                        $dispatch("refresh-editor");
                    }
                `,
                :class=`{ "text-primary": ${noteRef}.is_pinned }`
            )
                i.fa.fa-fw(:class=`"fa-thumbtack" + (${noteRef}.is_pinned ? "-slash" : "")`)
                span.ms-4(x-text=`${noteRef}.is_pinned ? 'Unpin' : 'Pin'`)

            li.dropdown-item(@click=`$dispatch('manage-tags', ${noteRef})`)
                i.fa.fa-tag.fa-fw
                span.ms-4 Manage tags

            li.dropdown-item(
                @click=`$dispatch("share-note", ${noteRef})`,
                :class=`{ "text-primary": ${noteRef}.shared_by_me }`
            )
                i.fa.fa-share-nodes.fa-fw
                span.ms-4(x-text=`${noteRef}.shared_by_me ? "Manage access" : "Share"`)

            li.dropdown-item(
                @click=`$dispatch("update-pass", ${noteRef}.id)`,
                :class=`{ 'text-primary': ${noteRef}.password }`
            )
                i.fa.fa-fw(:class=`"fa-" + (${noteRef}.password ? "key" : "lock")`)
                span.ms-4(x-text=`${noteRef}.password ? "Change password" : "Lock"`)
            
            li.dropdown-item.text-rose-600(@click=`$dispatch('delete-note', ${noteRef})`)
                i.fa.fa-trash.fa-fw
                span.ms-4 Delete

mixin section-header(title, icon)
    h2.text-xl.font-semibold.pb-2.border-b.border-gray-300(class="dark:border-gray-800")
        i.fa.text-primary(class=`fa-${icon}`)
        span.ms-4= title

block style

script.
    Alpine.data("app", function () {
        return {
            profile: {},

            options: Alpine.$persist({
                listView: false,
                sortByCreateDate: "0"
            }),

            settings: {
                tabs: ["Profile", "Security", "Appearance"],
                icons: ["user-circle", "shield", "palette"],

                active: Alpine.$persist("Profile")
            },

            syncStatus: "ok",
            lastSyncedTime: "",

            setSyncStatus(status) {
                this.syncStatus = status;
                if (status === "ok") {
                    this.lastSyncedTime = new Date().toLocaleString([], {
                        hour: "2-digit", minute: "2-digit"
                    });
                }
            },
    
            async init() {
                const { data: loginStatus } = await axiosInstance.get(
                    "/check_login.php"
                );

                if (!loginStatus.logged_in) {
                    await this.logout();
                }

                const media = window.matchMedia("(prefers-color-scheme: dark)");

                const changeTheme = (e) => {
                    this.$store.theme = e.matches ? "dark" : "light";
                }

                this.$watch("profile", () => {
                    if (this.profile.theme === "auto") {
                        media.addEventListener("change", changeTheme);
                        this.$store.theme = media.matches ? "dark" : "light";
                    } else {
                        media.removeEventListener("change", changeTheme);
                        this.$store.theme = this.profile.theme;
                    }
                });

                await this.fetchProfile();

                if (!this.profile.is_active && this.$router.context.path === "/") {
                    notyf.error("Account is not activated! Please check your email.");
                }

                for (const data of ["notes", "tags"]) {
                    if (this.$store[data].list.length === 0) {
                        await this.$store[data].fetch();
                    }
                }

                this.setSyncStatus("ok");
            },
    
            async fetchProfile() {
                try {
                    const { data } = await axiosInstance.get(
                        "/view_profile.php"
                    );

                    if (data.message) {
                        notyf.error(data.message);
                        return;
                    }
        
                    delete data.password;

                    data.image = data.image
                        ? `${API_URL}/api/${data.image}`
                        : placeholderAvatar(data.display_name, data.email);
        
                    this.profile = data;
                } catch { handleServerError(err); }
            },

            async updateProfile(profileData) {
                try {
                    const { data } = await axiosInstance.put(
                        "/edit_user.php", profileData
                    );

                    if (data.message === "User information has been updated.") {
                        notyf.success(data.message);
                    } else {
                        notyf.error(data.message);
                    }

                    await this.fetchProfile();
                } catch (err) { handleServerError(err); }
            },

            async updateAvatar(filePath) {
                try {
                    const formData = new FormData();
                    formData.append("image_path", filePath);

                    const { data } = await axiosInstance.post(
                        "/upload_avatar.php", formData
                    );

                    if (data.message === "Avatar has been updated successfully.") {
                        notyf.success(data.message);
                    } else {
                        notyf.error(data.message);
                    }

                    await this.fetchProfile();
                } catch (err) { handleServerError(err); }
            },

            async resetAvatar() {
                try {
                    const { data } = await axiosInstance.delete(
                        "/delete_avatar.php"
                    );

                    if (data.message === "Current avatar has been removed.") {
                        notyf.success(data.message);
                    } else {
                        notyf.error(data.message);
                    }

                    await this.fetchProfile();
                } catch (err) { handleServerError(err); }
            },

            async changePassword({ current_password, new_password, confirm_password }) {
                try {    
                    const { data } = await axiosInstance.put(
                        "/update_password.php", { current_password, new_password, confirm_password }
                    );

                    if (data.message === "Password has been updated successfully.") {
                        notyf.success(data.message);
                    } else {
                        notyf.error(data.message);
                    }
                } catch (err) { handleServerError(err); }
            },

            async logout() {
                try {
                    await axiosInstance.post(
                        "/logout.php"
                    );

                    this.$store.notes.list
                        = this.$store.tags.list
                        = [];

                    this.$router.navigate("/login");
                } catch (err) { handleServerError(err) }
            }
        };
    });

block script

#home.flex.flex-col.min-h-screen(x-data="app")
    header.grid.gap-2.sticky.top-0.px-4.py-2.bg-white.border-b.border-gray-200.z-2(
        class="md:grid-cols-3 dark:bg-gray-900 dark:border-gray-800"
    )
        .flex.items-center.items-center.gap-2
            block header-left

        .flex.justify-center.items-center.gap-2
            block header-center

        .flex.justify-end.items-center.gap-2
            block header-right

    block content

    +modal("manage-tags", "Manage tags")
        div(
            x-data="{ loading: false, noteId: -1, selectedTags: [] }",
            @manage-tags.window=`
                noteId = $event.detail.id;

                $dispatch("prompt-unlock", {
                    noteId,
                    onSuccess: () => {
                        selectedTags = $event.detail.tags.map(
                            (tag) => tag.id.toString()
                        );

                        $nextTick(() => $dispatch("show"));
                    }
                });
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.setTags(noteId, selectedTags)
                );

                $dispatch("close");
            `)
                ul.flex.flex-col.overflow-hidden.h-80.bg-gray-200.border.border-gray-300.divide-y.divide-gray-300.rounded(
                    class="dark:bg-gray-950 dark:border-gray-800 dark:divide-gray-800"
                )
                    template(x-for="tag in $store.tags.list")
                        li
                            input.hidden(type="checkbox", x-model="selectedTags", :id="`mtag-${tag.id}`", :value="tag.id")

                            label.cursor-pointer.flex.items-center.gap-4.px-4.py-2(
                                :for="`mtag-${tag.id}`",
                                x-data=`{
                                    get active() {
                                        return selectedTags.includes(tag.id.toString());
                                    }
                                }`,
                                class="hover:not-active:bg-gray-300/50 dark:hover:not-active:bg-gray-900/50",
                                :class="{ 'text-primary': active }"
                            )
                                i.fa(:class="`fa-square${active ? '-check' : ' fa-regular'}`")
                                span(x-text="tag.name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Save changes

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("note-pass-prompt", "Password prompt")
        div(
            x-data=`{
                loading: false,
                promptNote: {},
                onSuccess: undefined,
                onClose: undefined
            }`,
            @prompt-unlock.window=`
                const { noteId, onSuccess: s, onClose: c } = $event.detail;

                onSuccess = s; onClose = c;
                promptNote = $store.notes.get(noteId);

                if (!promptNote) {
                    notyf.error("No note found. Dismissing the password prompt");
                } else if (promptNote.password) {
                    MicroModal.show("note-pass-prompt", { onClose });
                } else {
                    onSuccess?.();
                }
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () => {
                    if ($el.pass.value !== promptNote.password) {
                        notyf.error("Oops, incorrect password. Give it another go!");
                    } else {
                        onSuccess?.();
                        $dispatch("close");
                    }
                });
            `)
                p.opacity-70
                    | Please enter the password to continue.

                label(for="pass")
                    span Password
                    input#pass.form-input(type="password", name="pass", autocomplete="new-password")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Unlock

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("delete-note", "Confirmation")
        div(
            x-data="{ loading: false, noteId: -1 }",
            @delete-note.window=`
                noteId = $event.detail.id;

                $dispatch("prompt-unlock", {
                    noteId,
                    onSuccess: () => {
                        $nextTick(() => $dispatch("show"));
                    }
                });
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.delete(noteId)
                );

                if ($router.context.path.startsWith("/edit/")) {
                    $router.navigate("/");
                }

                $dispatch("close");
            `)
                p.opacity-70 Are you sure you want to delete this note?

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Delete

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("update-note-pass", "Update note password")
        div(
            x-data="{ loading: false, noteId: -1 }",
            @update-pass.window=`
                noteId = $event.detail;

                $dispatch("prompt-unlock", {
                    noteId,
                    onSuccess: () => $nextTick(
                        () => $dispatch("show")
                    )
                });
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.updatePass(noteId, new FormData($el))
                );

                $dispatch("close");
            `)
                label(for="pass")
                    span Password
                    input#pass.form-input(type="password", name="new_password", autocomplete="new-password")

                label(for="confirm-pass")
                    span Confirm password
                    input#confirm-pass.form-input(type="password", name="confirm_password", autocomplete="new-password")

                .grid.gap-2.mt-2(class="sm:grid-cols-3")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Update

                    button.btn.text-rose-600.border(
                        type="button",
                        @click=`
                            $dispatch("close");
                            $nextTick(() => $dispatch("delete-pass", noteId));
                        `,
                        :disabled="!$store.notes.get(noteId)?.password"
                    )
                        | Delete

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("delete-pass", "Confirmation")
        div(
            x-data="{ loading: false, noteId: -1 }",
            @delete-pass.window=`
                noteId = $event.detail;
                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, async () => {
                    const passData = new FormData();

                    passData.append("new_password", "");
                    passData.append("confirm_password", "");

                    await $store.notes.updatePass(noteId, passData);
                });

                $dispatch("close");
            `)
                p.opacity-70 Are you sure you want to unlock this note?

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Delete

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("share-note", "Manage access")
        div(
            x-data="{ loading: false, noteId: -1, shared : [] }",
            @share-note.window=`
                shared = [];

                noteId = $event.detail.id;
                if ($event.detail.shared) {
                    $event.detail.shared.forEach(({ recipient_email, permission }) =>
                        shared.push({ recipient: recipient_email, permission })
                    );
                }

                $dispatch("prompt-unlock", {
                    noteId,
                    onSuccess: () => $nextTick(
                        () => $dispatch("show")
                    )
                });
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.share(noteId, shared)
                );

                if ($router.context.path.startsWith("/edit/")) {
                    $dispatch("refresh-editor");
                }

                $dispatch("close");
            `)
                .flex.flex-col.gap-2(x-data="{ emailInput: '' }", class="sm:flex-row")
                    input.form-input(type="email", x-model="emailInput", placeholder="Email address", class="!mt-0")
                    button.btn.text-white.bg-primary(type="button", @click=`
                        const { data } = await axiosInstance.post(
                            "/check_user_exists.php", { email: emailInput || "" }
                        );

                        if (data.exists) {
                            if (emailInput === profile.email) {
                                notyf.error("Cannot add yourself as the recipient");
                            } else if (shared.every((s) => s.recipient !== emailInput)) {
                                shared.push({ recipient: emailInput, permission: "read" });
                            }
                        } else {
                            notyf.error(data.error || "No user with that email found");
                        }
                    `)
                        i.fa.fa-plus
                        span.ms-4 Add

                ul.flex.flex-col.overflow-hidden.h-80.bg-gray-200.border.border-gray-300.divide-y.divide-gray-300.rounded(
                    class="dark:bg-gray-950 dark:border-gray-800 dark:divide-gray-800"
                )
                    template(x-for="s in shared")
                        li.flex.flex-col.justify-between.gap-4.ps-4.pe-2.py-2(class="sm:flex-row sm:items-center")
                            span.truncate(x-text="s.recipient")

                            .shrink-0.flex.gap-2
                                select.form-input(x-model="s.permission", class="sm:!w-30 !mt-0 !bg-gray-300 dark:!bg-gray-900")
                                    option(value="read") Viewer
                                    option(value="edit") Editor

                                button.shrink-0.btn-icon.text-rose-600(
                                    type="button",
                                    @click=`shared = shared.filter(
                                        (_s) => _s.recipient !== s.recipient
                                    )`
                                )
                                    i.fa.fa-trash

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Share

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close