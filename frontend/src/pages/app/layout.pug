mixin modal(id, title)
    //- Modal
    .modal(
        id=id, aria-hidden="true",
        @show="MicroModal.show($el.id)",
        @close="MicroModal.close($el.id)"
    )
        .modal__overlay(tabindex="-1")
            .modal-dialog(role="dialog", aria-labelledby=`${id}-title`)
                header.mb-4
                    h2.font-semibold.uppercase(id=`${id}-title`)= title

                block

    //- Trigger
    .hidden(data-micromodal-trigger=id)

mixin note-more-options(noteRef="note")
    div(x-data="dropdown", @mousedown.away="open = false", class!=attributes.class)
        button.btn-icon(type="button", x-ref="toggleBtn")
            i.fa.fa-ellipsis

        ul.dropdown-menu(x-ref="dropdownMenu")
            li.dropdown-item(@click=`
                $store.notes.update(${noteRef}.id, {
                    is_pinned: 1 - ${noteRef}.is_pinned
                });
            `)
                i.fa.fa-fw(:class=`"fa-thumbtack" + (${noteRef}.is_pinned ? "-slash" : "")`)
                span.ms-4(x-text=`${noteRef}.is_pinned ? 'Unpin' : 'Pin'`)

            li.dropdown-item(@click=`$dispatch('manage-tags', ${noteRef})`)
                i.fa.fa-tag.fa-fw
                span.ms-4 Manage tags

            li.dropdown-item
                i.fa.fa-lock.fa-fw
                span.ms-4 Lock
            
            li.dropdown-item.text-rose-600
                i.fa.fa-trash.fa-fw
                span.ms-4 Delete

script.
    Alpine.data("app", function () {
        return {
            profile: {},

            options: Alpine.$persist({
                listView: false
            }),
    
            init() {
                this.fetchProfile();
            },
    
            async fetchProfile() {
                try {
                    const { data } = await axiosInstance.get(
                        "/view_profile.php"
                    );

                    if (data.message) {
                        if (data.includes("Chưa đăng nhập")) {
                            throw new Error(data.message);
                        }

                        notyf.error(data.message);
                        return;
                    }
        
                    delete data["password"];

                    if (!data["is_active"]) {
                        notyf.error("Account is not activated! Please check your email.");
                    }
        
                    this.profile = data;
                } catch {
                    this.$router.navigate("/login");
                }
            },

            async logout() {
                try {
                    await axiosInstance.post(
                        "/logout.php"
                    );

                    this.$store.notes.list
                        = this.$store.tags.list
                        = [];

                    this.$router.navigate("/login");
                } catch (err) { handleServerError(err) }
            }
        };
    });

block script

#home.flex.flex-col.min-h-screen(x-data="app")
    header.grid.gap-2.sticky.top-0.px-4.py-2.bg-white.border-b.border-gray-200.z-2(
        class="md:grid-cols-3 dark:bg-gray-900 dark:border-gray-800"
    )
        .flex.items-center.items-center.gap-2
            block header-left

        .flex.justify-center.items-center.gap-2
            block header-center

        .flex.justify-end.items-center.gap-2
            block header-right

    block content

    +modal("manage-tags", "Manage tags")
        div(
            x-data="{ loading: false, noteId: -1, selectedTags: [] }",
            @manage-tags.window=`
                noteId = $event.detail.id;

                $dispatch("prompt-unlock", {
                    noteId,
                    onSuccess: () => {
                        selectedTags = $event.detail.tags.map(
                            (tag) => tag.id.toString()
                        );

                        $nextTick(() => $dispatch("show"));
                    }
                });
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.setTags(noteId, selectedTags)
                );

                $dispatch("close");
            `)
                ul.flex.flex-col.overflow-hidden.h-80.bg-gray-200.border.border-gray-300.divide-y.divide-gray-300.rounded(
                    class="dark:bg-gray-950 dark:border-gray-800 dark:divide-gray-800"
                )
                    template(x-for="tag in $store.tags.list")
                        li
                            input.hidden(type="checkbox", x-model="selectedTags", :id="`mtag-${tag.id}`", :value="tag.id")

                            label.cursor-pointer.flex.items-center.gap-4.px-4.py-2(
                                :for="`mtag-${tag.id}`",
                                x-data=`{
                                    get active() {
                                        return selectedTags.includes(tag.id.toString());
                                    }
                                }`,
                                class="hover:not-active:bg-gray-300/50 dark:hover:not-active:bg-gray-900/50",
                                :class="{ 'text-primary': active }"
                            )
                                i.fa(:class="`fa-square${active ? '-check' : ' fa-regular'}`")
                                span(x-text="tag.name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Save changes

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("note-pass-prompt", "Password prompt")
        div(
            x-data=`{
                loading: false,
                promptNote: {},
                onSuccess: undefined,
                onClose: undefined
            }`,
            @prompt-unlock.window=`
                const { noteId, onSuccess: s, onClose: c } = $event.detail;

                onSuccess = s; onClose = c;
                promptNote = $store.notes.get(noteId);

                if (!promptNote) {
                    notyf.error("No note found. Dismissing the password prompt");
                } else if (promptNote.password) {
                    MicroModal.show("note-pass-prompt", { onClose });
                } else {
                    onSuccess?.();
                }
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () => {
                    if ($el.pass.value !== promptNote.password) {
                        notyf.error("Oops, incorrect password. Give it another go!");
                    } else {
                        onSuccess?.();
                        $dispatch("close");
                    }
                });
            `)
                p.opacity-70
                    | Please enter the password to continue.

                label(for="pass")
                    span Password
                    input#pass.form-input(type="password", name="pass", autocomplete="new-password")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Unlock

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close