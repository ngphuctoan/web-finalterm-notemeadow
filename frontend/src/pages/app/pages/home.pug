extends ../layout

mixin section-header(title, icon)
    h2.text-xl.font-semibold.pb-2.border-b.border-gray-300(class="dark:border-gray-800")
        i.fa.text-primary(class=`fa-${icon}`)
        span.ms-4= title

mixin note-grid(pinned)
    .grid.grid-cols-1.gap-4.divide-gray-800(
        :class="{ 'sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4': !options.listView }"
    )
        template(
            x-for=`note in $store.notes.list.filter((note) =>
                note.is_pinned === ${+pinned} &&
                $store.tags.actives.every((tagId) =>
                    note.tags.map((tag) => tag.id)
                        .includes(Number(tagId))
                )
            )`,
            :key="note.id"
        )
            .cursor-pointer.relative.p-4.bg-gray-300.border.border-transparent.outline-primary.rounded(
                @click="$dispatch('prompt-unlock', note.id)",
                class="dark:bg-gray-900 hover:border-gray-400 dark:hover:border-gray-800 focus:outline-3",
            )
                .flex.items-center.gap-4
                    template(x-if="note.password")
                        .placeholder-text.w-40

                    template(x-if="!note.password && note.title")
                        h5.text-lg.font-semibold.truncate(
                            x-text="note.title"
                        )

                    .ms-auto(x-data="dropdown", @mousedown.away="open = false")
                        button.btn-icon(
                            type="button",
                            x-ref="toggleBtn"
                        )
                            i.fa.fa-ellipsis

                        ul.dropdown-menu(x-ref="dropdownMenu")
                            li.dropdown-item(@click=`
                                $store.notes.update(note.id, {
                                    is_pinned: 1 - note.is_pinned
                                });
                            `)
                                i.fa.fa-fw(:class="`fa-thumbtack${note.is_pinned ? '-slash' : ''}`")
                                span.ms-4(x-text="note.is_pinned ? 'Unpin' : 'Pin'")

                            li.dropdown-item(@click="$dispatch('manage-tags', note)")
                                i.fa.fa-tag.fa-fw
                                span.ms-4 Manage tags

                            li.dropdown-item
                                i.fa.fa-lock.fa-fw
                                span.ms-4 Lock
                            
                            li.dropdown-item.text-rose-600
                                i.fa.fa-trash.fa-fw
                                span.ms-4 Delete

                template(x-if="!note.password")
                    .overflow-hidden.flex.gap-1.relative.mb-2
                        template(x-for="tag in note.tags")
                            span.text-nowrap.px-2.bg-gray-400.rounded(x-text="tag.name", class="dark:bg-gray-700")

                        .absolute.inset-0.z-1.bg-linear-to-r.to-gray-300(class="from-90% dark:to-gray-900")

                template(x-if="note.password")
                    .flex.flex-wrap.gap-3.mt-3
                        each w in [20, 30, 30, 20, 40]
                            .placeholder-text(class=`w-${w}`)

                template(x-if="!note.password")
                    p.leading-5.wrap-break-word.line-clamp-2.mb-2(
                        x-text="$store.notes.deltaToPreview(note.content)"
                        :class="{ 'whitespace-pre-line line-clamp-4': !options.listView }"
                    )

                template(x-if="note.password")
                    i.fa.fa-lock.fa-xl.absolute(class="top-1/2 left-1/2 -translate-1/2")

block header-left
    h1.text-xl.font-semibold.text-primary notemeadow

block header-center
    .relative.w-full
        i.fa.fa-magnifying-glass.absolute.left-3(class="top-1/2 -translate-y-1/2")

        input.form-input(placeholder="Search for notes...", class="ps-10 pe-9 !m-0")

        .spinner.hidden.absolute.right-3(class="top-1/2 -translate-y-1/2")

block header-right
    button.btn.flex.items-center.gap-4.p-0(type="button")
        img.size-8.rounded-full(:src="`${API_URL}/api/${profile.image || 'uploads/Embargo_PBR.png'}`")
        span(x-text="profile.display_name")

block content
    #notes.flex-1.grid(class="lg:grid-cols-[1fr_3fr] xl:grid-cols-[1fr_4fr]")
        aside.flex.flex-col.gap-4.sticky.p-4.z-1(class="bg-white dark:bg-gray-900/50")
            .flex.justify-between.items-center
                h2.text-lg.font-semibold.ms-2 Tags

                button.btn.text-white.bg-primary(type="button", data-micromodal-trigger="new-tag")
                    i.fa.fa-plus
                    span.ms-2 Add tag

            template(x-if="$store.tags.list.length > 0")
                ul.overflow-hidden.bg-gray-100.border.border-gray-300.divide-y.divide-gray-300.rounded(
                    class="dark:bg-gray-900 dark:border-gray-800 dark:divide-gray-800"
                )
                    template(x-for="tag in $store.tags.list", :key="tag.id")
                        li.flex(
                            x-data="{ get active() { return $store.tags.actives.includes(tag.id.toString()); } }",
                            class="hover:not-active:bg-gray-300/50 dark:hover:not-active:bg-gray-800/50"
                        )
                            input.hidden(type="checkbox", x-model="$store.tags.actives", :id="tag.id", :value="tag.id")

                            label.cursor-pointer.flex-1.flex.items-center.px-4.py-2(
                                :for="tag.id",
                                :class="{ 'text-primary': active }"
                            )
                                i.fa.text-lg(:class="`fa-square${active ? '-check' : ' fa-regular'}`")
                                p.flex-1.w-0.truncate.ms-4(x-text="tag.name")

                            div(x-data="dropdown", @mousedown.away="open = false")
                                button.btn-icon.rounded-none(
                                    type="button",
                                    x-ref="toggleBtn"
                                )
                                    i.fa.fa-ellipsis

                                ul.dropdown-menu(x-ref="dropdownMenu")
                                    li.dropdown-item(@click="$dispatch('rename-tag', tag.id)")
                                        i.fa.fa-pencil.fa-fw
                                        span.ms-4 Edit
                                    
                                    li.dropdown-item.text-rose-600(@click="$dispatch('delete-tag', tag.id)")
                                        i.fa.fa-trash.fa-fw
                                        span.ms-4 Delete
        
        section.flex.flex-col.gap-8.p-8
            .flex.justify-between.items-center(
                x-data="{ greeting: 'Good ' }",
                x-init=`
                    const hour = new Date().getHours();
                    greeting += [
                        "night", "morning", "afternoon", "evening"
                    ][Math.floor((hour + 2) / 6) % 4];
                `
            )
                h1.hidden.text-xl.font-bold.pe-4(class="sm:inline-block lg:text-2xl")
                    span(x-text="greeting")
                    | , 
                    span.text-primary(x-text="profile.display_name")
                    | !

                .flex.gap-2
                    .flex.ms-auto
                        btn.btn.rounded-e-none(
                            type="button",
                            @click="options.listView = false",
                            :class="options.listView ? 'border' : 'text-white bg-primary'"
                        )
                            i.fa.fa-border-all
                            span.hidden.ms-4(class="sm:inline") Grid

                        btn.btn.rounded-s-none(
                            type="button",
                            @click="options.listView = true",
                            :class="options.listView ? 'text-white bg-primary' : 'border'"
                        )
                            i.fa.fa-list
                            span.hidden.ms-4(class="sm:inline") List

                    btn.btn.border(type="button")
                        i.fa.fa-sort
                        span.ms-4 Sort by

            +section-header("Pinned", "thumbtack")

            +note-grid(true)

            +section-header("Other", "note-sticky")

            +note-grid(false)

    mixin modal(id, title)
        //- Modal
        .modal(
            id=id, aria-hidden="true",
            @show="MicroModal.show($el.id)",
            @close="MicroModal.close($el.id)"
        )
            .modal__overlay(tabindex="-1")
                .modal-dialog(role="dialog", aria-labelledby=`${id}-title`)
                    header.mb-4
                        h2.font-semibold.uppercase(id=`${id}-title`)= title

                    block

        //- Trigger
        .hidden(data-micromodal-trigger=name)

    +modal("new-tag", "Add new tag")
        div(x-data="{ loading: false }")
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.tags.add($el.name.value)
                );

                $dispatch("close");
            `)
                label(for="name")
                    span Tag name
                    input#name.form-input(type="text", name="name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Add

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("rename-tag", "Rename tag")
        div(
            x-data="{ loading: false, id: -1 }",
            @rename-tag.window=`
                id = $event.detail;
                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, async () => {
                    await $store.tags.rename(id, $el.name.value);
                    await $store.notes.fetch();
                });

                $dispatch("close");
            `)
                p.opacity-70
                    | Please enter a new name for tag "
                    span.break-all(x-text="$store.tags.get(id)?.name")
                    | ".

                label(for="name")
                    span Tag name
                    input#name.form-input(type="text", name="name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Rename

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("delete-tag", "Confirmation")
        div(
            x-data="{ loading: false, id: -1 }",
            @delete-tag.window=`
                id = $event.detail;
                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, async () => {
                    await $store.tags.delete(id);
                    await $store.notes.fetch();

                    $store.tags.actives = [];
                });

                $dispatch("close");
            `)
                p.opacity-70
                    | Are you sure you want to delete tag "
                    span.break-all(x-text="$store.tags.get(id)?.name")
                    | "?

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Delete

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("note-pass-prompt", "Password prompt")
        div(
            x-data="{ loading: false, id: -1 }",
            @prompt-unlock.window=`
                id = $event.detail;

                if ($store.notes.get(id)?.password) {
                    $dispatch("show");
                } else {
                    $dispatch("goto-edit", id);
                }
            `,
            @goto-edit="$router.navigate(`/edit/${$event.detail}`)"
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () => {
                    if ($el.pass.value === $store.notes.get(id)?.password) {
                        $dispatch("goto-edit", id);
                    } else {
                        notyf.error("Incorrect password");
                    }
                });

                $dispatch("close");
            `)
                p.opacity-70
                    | Please enter the password to unlock this note.

                label(for="pass")
                    span Password
                    input#pass.form-input(type="password", name="pass", autocomplete="new-password")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Unlock

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("manage-tags", "Manage tags")
        div(
            x-data="{ loading: false, noteId: -1, selectedTags: [] }",
            @manage-tags.window=`
                noteId = $event.detail.id;
                selectedTags = $event.detail.tags.map(
                    (tag) => tag.id.toString()
                );

                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.setTags(noteId, selectedTags)
                );

                $dispatch("close");
            `)
                ul.flex.flex-col.overflow-hidden.h-80.bg-gray-200.border.border-gray-300.divide-y.divide-gray-300.rounded(
                    class="dark:bg-gray-950 dark:border-gray-800 dark:divide-gray-800"
                )
                    template(x-for="tag in $store.tags.list")
                        li
                            input.hidden(type="checkbox", x-model="selectedTags", :id="`mtag-${tag.id}`", :value="tag.id")

                            label.cursor-pointer.flex.items-center.gap-4.px-4.py-2(
                                :for="`mtag-${tag.id}`",
                                x-data=`{
                                    get active() {
                                        return selectedTags.includes(tag.id.toString());
                                    }
                                }`,
                                class="hover:not-active:bg-gray-300/50 dark:hover:not-active:bg-gray-900/50",
                                :class="{ 'text-primary': active }"
                            )
                                i.fa(:class="`fa-square${active ? '-check' : ' fa-regular'}`")
                                span(x-text="tag.name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Save changes

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close