extends ../layout

mixin note-grid(pinned, shared)
    .grid.grid-cols-1.gap-4.divide-gray-800(
        :class="{ 'sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4': !options.listView }"
    )
        template(
            x-for=`note in $store.notes.list.filter((note) => {
                const matchesFilter =
                    $store.notes.matchesTagFilters(note, $store.tags.actives) &&
                    $store.notes.matchesQuery(note);

                if (${pinned}) return matchesFilter && note.is_pinned;
                if (${shared}) return matchesFilter && note.shared_id;

                return matchesFilter && !note.is_pinned && !note.shared_id;
            })?.sort((a, b) => options.sortByCreateDate === "1"
                ? b.created_at - a.created_at
                : b.modified_at - a.modified_at)`,
            :key="note.id"
        )
            .cursor-pointer.relative.p-4.border.border-transparent.rounded(
                @click="$router.navigate(`/edit/${note.id}`)",
                :class="`${$store.notes.colors[note.note_color]} hover:outline-1 active:outline-3 active:outline-primary`",
            )
                - const isLocked = "note.password && !note.shared_id";

                .flex.items-center.gap-4
                    template(x-if=isLocked)
                        .placeholder-text.w-40

                    template(x-if=`!(${isLocked}) && note.title`)
                        h5.text-lg.font-semibold.truncate(
                            x-text="note.title",
                            :class="{ 'leading-[40px]': note.shared_id }"
                        )

                    template(x-if="note.shared")
                        i.fa.fa-share.text-primary

                    if !shared
                        +note-more-options(class="ms-auto")

                template(x-if=`!(${isLocked})`)
                    .overflow-hidden.flex.gap-1.mb-2
                        template(x-for="tag in note.tags")
                            span.text-nowrap.px-2.rounded(x-text="tag.name", class="bg-black/25")

                template(x-if=isLocked)
                    .flex.flex-wrap.gap-3.mt-3
                        each w in ["w-20", "w-30", "w-30", "w-20", "w-40"]
                            .placeholder-text(class=w)

                template(x-if=`!(${isLocked})`)
                    p.leading-5.wrap-break-word.line-clamp-2.mb-2(
                        :class="{ 'whitespace-pre-line line-clamp-4': !options.listView }"
                    )
                        template(x-if="note.shared_id")
                            ul.list-disc.list-inside.opacity-70
                                li.mb-1
                                    strong.font-bold Shared by: 
                                    span(x-text="note.shared_by")
                                li
                                    strong.font-bold Permission: 
                                    span(x-text=`
                                        note.permission.charAt(0).toUpperCase() +
                                        note.permission.slice(1)
                                    `)

                        template(x-if="!note.shared_id")
                            span(x-text="$store.notes.deltaToPreview(note.content)")

                template(x-if=isLocked)
                    i.fa.fa-lock.fa-xl.absolute(class="top-1/2 left-1/2 -translate-1/2")

block header-left
    h1.text-xl.font-semibold.text-primary notemeadow

block header-center
    .relative.w-full(x-data="{ loading: false }")
        i.fa.fa-magnifying-glass.absolute.left-3(class="top-1/2 -translate-y-1/2")

        input.form-input(
            @input.debounce.300ms=`
                loading = true;
                $store.notes.searchQuery = $el.value;
                setTimeout(() => loading = false, 300);
            `,
            placeholder="Search for notes...",
            class="ps-10 pe-9 !m-0"
        )

        .spinner.absolute.right-3(
            class="top-1/2 -translate-y-1/2",
            :class="{ 'hidden': !loading }"
        )

block header-right
    div(x-data="dropdown", @mousedown.away="open = false")
        button.btn.flex.items-center.gap-4.p-0(type="button", x-ref="toggleBtn")
            img.size-8.rounded-full(:src="profile.image ? `${API_URL}/api/${profile.image}` : DEFAULT_PROFILE_IMAGE")
            span(x-text="profile.display_name")

        ul.dropdown-menu(x-ref="dropdownMenu")
            li.dropdown-item(@click="$router.navigate('/settings')")
                i.fa.fa-gear.fa-fw
                span.ms-4 Settings
            
            li.dropdown-item.text-rose-600(@click="$dispatch('logout')")
                i.fa.fa-arrow-right-from-bracket.fa-fw
                span.ms-4 Logout

block content
    #notes.flex-1.grid(
        x-init="$store.notes.opened = -1",
        class="grid-rows-[auto_1fr] lg:grid-rows-1 lg:grid-cols-[1fr_3fr] xl:grid-cols-[1fr_4fr]"
    )
        aside.flex.flex-col.gap-4.sticky.p-4.z-1(class="bg-white dark:bg-gray-900/50")
            .flex.justify-between.items-center
                h2.text-lg.font-semibold.ms-2 Tags

                button.btn.text-white.bg-primary(type="button", data-micromodal-trigger="new-tag")
                    i.fa.fa-plus
                    span.ms-2 Add tag

            template(x-if="$store.tags.list.length > 0")
                ul.overflow-hidden.bg-gray-100.border.border-gray-300.divide-y.divide-gray-300.rounded(
                    class="dark:bg-gray-900 dark:border-gray-800 dark:divide-gray-800"
                )
                    template(x-for="tag in $store.tags.list", :key="tag.id")
                        li.flex(
                            x-data="{ get active() { return $store.tags.actives.includes(tag.id.toString()); } }",
                            class="hover:not-active:bg-gray-300/50 dark:hover:not-active:bg-gray-800/50"
                        )
                            input.hidden(type="checkbox", x-model="$store.tags.actives", :id="tag.id", :value="tag.id")

                            label.cursor-pointer.flex-1.flex.items-center.px-4.py-2(
                                :for="tag.id",
                                :class="{ 'text-primary': active }"
                            )
                                i.fa.text-lg(:class="`fa-square${active ? '-check' : ' fa-regular'}`")
                                p.flex-1.w-0.truncate.ms-4(x-text="tag.name")

                            div(x-data="dropdown", @mousedown.away="open = false")
                                button.btn-icon.rounded-none(type="button", x-ref="toggleBtn")
                                    i.fa.fa-ellipsis

                                ul.dropdown-menu(x-ref="dropdownMenu")
                                    li.dropdown-item(@click="$dispatch('rename-tag', tag.id)")
                                        i.fa.fa-pencil.fa-fw
                                        span.ms-4 Edit
                                    
                                    li.dropdown-item.text-rose-600(@click="$dispatch('delete-tag', tag.id)")
                                        i.fa.fa-trash.fa-fw
                                        span.ms-4 Delete
        
        section.flex.flex-col.gap-8.p-8
            .flex.flex-wrap.items-center.gap-4(
                x-data="{ greeting: 'Good ' }",
                x-init=`
                    const hour = new Date().getHours();
                    greeting += [
                        "night", "morning", "afternoon", "evening"
                    ][Math.floor((hour + 2) / 6) % 4];
                `
            )
                h1.text-xl.font-bold.pe-4
                    span(x-text="greeting")
                    | , 
                    span.text-primary(x-text="profile.display_name")
                    | !

                .flex.gap-2.ms-auto
                    .flex
                        btn.btn.rounded-e-none(
                            type="button",
                            @click="options.listView = false",
                            :class="options.listView ? 'border' : 'text-white bg-primary'"
                        )
                            i.fa.fa-border-all
                            span.hidden.ms-4(class="sm:inline") Grid

                        btn.btn.rounded-s-none(
                            type="button",
                            @click="options.listView = true",
                            :class="options.listView ? 'text-white bg-primary' : 'border'"
                        )
                            i.fa.fa-list
                            span.hidden.ms-4(class="sm:inline") List

                    select.form-input(x-model="options.sortByCreateDate", class="!w-40 !mt-0")
                        option(value="0", selected) Last modified
                        option(value="1") Last created

            form.flex.flex-col.gap-2(
                @submit.prevent=`
                    const id = await $store.notes.create(new FormData($el));
                    if (id) {
                        $router.navigate("/edit/" + id);
                    }
                `,
                class="sm:flex-row"
            )
                input.form-input(
                    type="text",
                    name="title",
                    placeholder="Enter a title to create a new note!",
                    class="!mt-0"
                )

                button.btn.text-white.bg-primary(type="submit")
                    i.fa.fa-paper-plane
                    span.ms-4 Create

            +section-header("Pinned", "thumbtack")

            +note-grid(true, false)

            +section-header("Other", "note-sticky")

            +note-grid(false, false)

            +section-header("Shared", "share")

            +note-grid(false, true)

    +modal("new-tag", "Add new tag")
        div(x-data="{ loading: false }")
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.tags.add($el.name.value)
                );

                $dispatch("close");
            `)
                label(for="name")
                    span Tag name
                    input#name.form-input(type="text", name="name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Add

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("rename-tag", "Rename tag")
        div(
            x-data="{ loading: false, id: -1 }",
            @rename-tag.window=`
                id = $event.detail;
                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, async () => {
                    await $store.tags.rename(id, $el.name.value);
                    await $store.notes.fetch();
                });

                $dispatch("close");
            `)
                p.opacity-70
                    | Please enter a new name for tag "
                    span.break-all(x-text="$store.tags.get(id)?.name")
                    | ".

                label(for="name")
                    span Tag name
                    input#name.form-input(type="text", name="name")

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Rename

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("delete-tag", "Confirmation")
        div(
            x-data="{ loading: false, id: -1 }",
            @delete-tag.window=`
                id = $event.detail;
                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, async () => {
                    await $store.tags.delete(id);
                    await $store.notes.fetch();

                    $store.tags.actives = [];
                });

                $dispatch("close");
            `)
                p.opacity-70
                    | Are you sure you want to delete tag "
                    span.break-all(x-text="$store.tags.get(id)?.name")
                    | "?

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Delete

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close

    +modal("logout", "Logging out")
        div(@logout.window="$dispatch('show'); await logout(); $dispatch('close')")
            .spinner
            span.ms-4.opacity-70 You will be redirected to the login page soon!