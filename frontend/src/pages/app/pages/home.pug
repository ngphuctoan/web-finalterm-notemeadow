extends ../layout

mixin section-header(title, icon)
    h2.text-xl.font-semibold.pb-2.border-b.border-gray-300(class="dark:border-gray-800")
        i.fa.text-primary(class=`fa-${icon}`)
        span.ms-4= title

mixin note-grid(pinned)
    .grid.gap-4.divide-gray-800(
        :class="{ 'sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4': !options.listView }"
    )
        template(
            x-for=`note in $store.notes._list.filter((note) =>
                note.is_pinned === ${+pinned}
            )`,
            :key="note.id"
        )
            a.p-4.bg-gray-300.border.border-transparent.outline-primary.rounded(
                :href="`/edit/${note.id}`",
                class="dark:bg-gray-900 hover:border-gray-400 dark:hover:border-gray-800 focus:outline-3",
            )
                .mb-4
                    h5.text-lg.font-semibold(x-text="note.title")

                p.leading-5.break-all.line-clamp-2(
                    x-text="$store.notes.deltaToPreview(note.content)",
                    :class="{ 'whitespace-pre-line line-clamp-5': !options.listView }"
                )

block header-left
    h1.text-xl.font-semibold.text-primary notemeadow

block header-center
    .relative.w-full
        i.fa.fa-magnifying-glass.absolute.left-3(class="top-1/2 -translate-y-1/2")

        input.form-input(placeholder="Search for notes...", class="ps-10 pe-9 !m-0")

        .spinner.hidden.absolute.right-3(class="top-1/2 -translate-y-1/2")

block header-right
    button.btn.flex.items-center.gap-4.p-0(type="button")
        img.size-8.rounded-full(:src="`${API_URL}/api/${profile.image || 'uploads/Embargo_PBR.png'}`")
        span(x-text="profile.display_name")

block content
    #notes.flex-1.grid(class="lg:grid-cols-[1fr_3fr] xl:grid-cols-[1fr_4fr]")
        aside.flex.flex-col.gap-4.sticky.p-4(class="bg-white dark:bg-gray-900/50")
            .flex.justify-between.items-center
                h2.text-lg.font-semibold.ms-2 Tags

                button.btn.text-white.bg-primary(type="button")
                    i.fa.fa-plus
                    span.ms-2 Add tag

            ul.bg-gray-100.border.border-gray-300.divide-y.divide-gray-300.rounded(
                class="dark:bg-gray-900 dark:border-gray-800 dark:divide-gray-800"
            )
                template(x-for="tag in $store.tags._list", :key="tag.id")
                    li.px-4.py-2(class="hover:not-active:bg-gray-300/50 dark:hover:not-active:bg-gray-800/50")
                        i.fa.fa-tag.text-lg
                        span.ms-4.text-gray-700(x-text="tag.name", class="dark:text-gray-400")
        
        section.flex.flex-col.gap-8.p-8
            .flex.justify-between.items-center(
                x-data="{ greeting: 'Good ' }",
                x-init=`
                    const hour = new Date().getHours();
                    greeting += [
                        "night", "morning", "afternoon", "evening"
                    ][Math.floor((hour + 2) / 6) % 4];
                `
            )
                h1.hidden.text-xl.font-bold.pe-4(class="sm:inline-block lg:text-2xl")
                    span(x-text="greeting")
                    | , 
                    span.text-primary(x-text="profile.display_name")
                    | !

                .flex.gap-2
                    .flex.ms-auto
                        btn.btn.rounded-e-none(
                            type="button",
                            @click="options.listView = false",
                            :class="options.listView ? 'border' : 'text-white bg-primary'"
                        )
                            i.fa.fa-border-all
                            span.hidden.ms-4(class="sm:inline") Grid

                        btn.btn.rounded-s-none(
                            type="button",
                            @click="options.listView = true",
                            :class="options.listView ? 'text-white bg-primary' : 'border'"
                        )
                            i.fa.fa-list
                            span.hidden.ms-4(class="sm:inline") List

                    btn.btn.border(type="button")
                        i.fa.fa-sort
                        span.ms-4 Sort by

            +section-header("Pinned", "thumbtack")

            +note-grid(true)

            +section-header("Other", "note-sticky")

            +note-grid(false)
    //- .flex.items-center.justify-between.p-4.bg-white.shadow(class="dark:bg-gray-900")
    //-     .text-xl.font-bold Note App
    //-     .flex.items-center.space-x-4
    //-         input.border.rounded.px-4.py-2.w-72.bg-gray-50(
    //-             type="text",
    //-             placeholder="Search...",
    //-             class="dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
    //-         )
    //-         .relative(x-data="{ open: false }")
    //-             //- <button @click="open = !open" class="text-gray-600 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400">Settings</button>
    //-             //- <div x-show="open" @click.outside="open = false" class="absolute right-0 mt-2 bg-white dark:bg-gray-900 border dark:border-gray-700 rounded shadow w-40">
    //-             button.block.w-full.text-left.px-4.py-2.text-gray-700(
    //-                 @click="toggleDarkMode()",
    //-                 class="hover:bg-gray-100 dark:hover:bg-gray-800 dark:text-gray-200"
    //-             ) Toggle Theme
    //-             //- </div>
    //- Main content
    //- .flex.p-4.space-x-4(x-data="app")
    //-     //- Sidebar
    //-     .w-64.bg-white.rounded-lg.shadow.p-4.flex.flex-col.justify-between(
    //-         class="dark:bg-gray-900"
    //-     )
    //-         div
    //-             h2.text-lg.font-semibold.mb-4.text-gray-900(class="dark:text-gray-100") Tags
    //-             .space-y-2
    //-                 template(x-for="tag in tags", :key="tag")
    //-                     .border.p-2.rounded.bg-gray-50.text-gray-700(
    //-                         class="dark:border-gray-700 dark:bg-gray-800 dark:text-gray-200",
    //-                         x-text="tag"
    //-                     )
    //-         .mt-6
    //-             button.w-full.bg-blue-600.text-white.py-2.rounded.transition-colors(
    //-                 @click="showModal = true",
    //-                 class="hover:bg-blue-700"
    //-             ) Add Tag
    //-     //- Notes Section
    //-     .flex-1.flex.flex-col.space-y-6
    //-         //- Sort by
    //-         .flex.justify-end
    //-             button.border.px-4.py-2.rounded.text-gray-700.transition-colors(
    //-                 class="dark:text-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800"
    //-             ) Sort by
    //-         //- Pinned notes
    //-         div
    //-             h2.text-xl.font-semibold.mb-4.text-gray-900(class="dark:text-gray-100") Pinned
    //-             .grid.grid-cols-1.gap-4(class="sm:grid-cols-2 md:grid-cols-3")
    //-                 template(
    //-                     x-for="(note, index) in []",
    //-                     :key="'pinned-' + index"
    //-                 )
    //-                     .bg-white.p-4.rounded-lg.shadow.cursor-move.transition-shadow(
    //-                         draggable="true",
    //-                         @dragstart="dragStart(note)",
    //-                         @dragover.prevent="",
    //-                         @drop="drop(note)",
    //-                         class="dark:bg-gray-900 hover:shadow-md"
    //-                     )
    //-                         .flex.justify-between
    //-                             h3.font-bold.mb-2.text-gray-900(
    //-                                 class="dark:text-gray-100",
    //-                                 x-text="note.title"
    //-                             )
    //-                             button.text-yellow-500.text-xl(
    //-                                 @click="togglePin(note)",
    //-                                 class="hover:text-yellow-600"
    //-                             ) &starf;
    //-                         .text-sm.text-gray-500.mb-2(
    //-                             class="dark:text-gray-400",
    //-                             x-text="'[' + note.tag + ']'"
    //-                         )
    //-                         p.text-gray-700.truncate.overflow-hidden.whitespace-nowrap(
    //-                             class="dark:text-gray-200",
    //-                             x-text="note.content"
    //-                         )
    //-         //- Unpinned notes
    //-         div
    //-             h2.text-xl.font-semibold.mb-4.text-gray-900(class="dark:text-gray-100") Others
    //-             .grid.grid-cols-1.gap-4(class="sm:grid-cols-2 md:grid-cols-3")
    //-                 template(
    //-                     x-for="(note, index) in []",
    //-                     :key="'unpinned-' + index"
    //-                 )
    //-                     .bg-white.p-4.rounded-lg.shadow.cursor-move.transition-shadow(
    //-                         draggable="true",
    //-                         @dragstart="dragStart(note)",
    //-                         @dragover.prevent="",
    //-                         @drop="drop(note)",
    //-                         class="dark:bg-gray-900 hover:shadow-md"
    //-                     )
    //-                         .flex.justify-between
    //-                             h3.font-bold.mb-2.text-gray-900(
    //-                                 class="dark:text-gray-100",
    //-                                 x-text="note.title"
    //-                             )
    //-                             button.text-gray-400.text-xl(
    //-                                 @click="togglePin(note)",
    //-                                 class="hover:text-yellow-400"
    //-                             ) &star;
    //-                         .text-sm.text-gray-500.mb-2(
    //-                             class="dark:text-gray-400",
    //-                             x-text="'[' + note.tag + ']'"
    //-                         )
    //-                         p.text-gray-700.truncate.overflow-hidden.whitespace-nowrap(
    //-                             class="dark:text-gray-200",
    //-                             x-text="note.content"
    //-                         )
    //- //- Modal Add Tag
    //- .fixed.inset-0.flex.items-center.justify-center.bg-black.bg-opacity-50(
    //-     x-show="showModal", x-data="noteApp()"
    //- )
    //-     .bg-white.p-6.rounded-lg.shadow(class="w-1/3 dark:bg-gray-900")
    //-         h2.text-xl.font-bold.mb-4.text-gray-900(class="dark:text-gray-100") Add New Tag
    //-         input.border.rounded.w-full.p-2.mb-4.bg-gray-50(
    //-             type="text",
    //-             x-model="newTag",
    //-             class="dark:bg-gray-800 dark:text-gray-100 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-400",
    //-             placeholder="Enter tag name"
    //-         )
    //-         .flex.justify-end.space-x-2
    //-             button.px-4.py-2.bg-gray-200.rounded.transition-colors(
    //-                 @click="showModal = false",
    //-                 class="dark:bg-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600"
    //-             ) Cancel
    //-             button.px-4.py-2.bg-blue-600.text-white.rounded.transition-colors(
    //-                 @click="addTag()",
    //-                 class="hover:bg-blue-700"
    //-             ) Add
    //- //- Alpine.js Logic
    //- script.
    //-     function noteApp() {
    //-         return {
    //-             darkMode: JSON.parse(localStorage.getItem("darkMode")) ?? false,
    //-             showModal: false,
    //-             newTag: "",
    //-             draggedNote: null,
    //-             tags: JSON.parse(localStorage.getItem("tags")) ?? ["tag-1", "tag-2"],
    //-             notes: JSON.parse(localStorage.getItem("notes")) ?? [
    //-                 { title: "Note 1", tag: "tag-1", content: "This is a pinned note", pinned: true },
    //-                 { title: "Note 2", tag: "tag-2", content: "This is another note and very much note for u This is another note and very much note for u This is another note and very much note for u This is another note and very much note for u", pinned: false },
    //-                 { title: "Note 3", tag: "tag-1", content: "More content here", pinned: false },
    //-             ],
    //-             get pinnedNotes() {
    //-                 return this.notes.filter((n) => n.pinned);
    //-             },
    //-             get unpinnedNotes() {
    //-                 return this.notes.filter((n) => !n.pinned);
    //-             },
    //-             addTag() {
    //-                 if (this.newTag.trim() !== "" && !this.tags.includes(this.newTag.trim())) {
    //-                     this.tags.push(this.newTag.trim());
    //-                     this.saveData();
    //-                 }
    //-                 this.newTag = "";
    //-                 this.showModal = false;
    //-             },
    //-             toggleDarkMode() {
    //-                 this.darkMode = !this.darkMode;
    //-                 localStorage.setItem("darkMode", this.darkMode);
    //-             },
    //-             togglePin(note) {
    //-                 note.pinned = !note.pinned;
    //-                 this.saveData();
    //-             },
    //-             dragStart(note) {
    //-                 this.draggedNote = note;
    //-             },
    //-             drop(targetNote) {
    //-                 if (!this.draggedNote || this.draggedNote === targetNote) return;
    //-                 const from = this.notes.indexOf(this.draggedNote);
    //-                 const to = this.notes.indexOf(targetNote);
    //-                 this.notes.splice(from, 1);
    //-                 this.notes.splice(to, 0, this.draggedNote);
    //-                 this.draggedNote = null;
    //-                 this.saveData();
    //-             },
    //-             saveData() {
    //-                 localStorage.setItem("tags", JSON.stringify(this.tags));
    //-                 localStorage.setItem("notes", JSON.stringify(this.notes));
    //-             },
    //-             init() {
    //-                 localStorage.removeItem("notes");
    //-                 localStorage.removeItem("tags");
    //-             },
    //-         };
    //-     }