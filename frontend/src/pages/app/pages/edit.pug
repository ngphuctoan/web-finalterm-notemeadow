extends ../layout

block header-left
    a.btn-icon(href="/")
        i.fa.fa-arrow-left

block header-right
    .btn(
        x-data=`{
            "synced": { icon: "circle-check" },
            "waiting": { icon: "sync fa-spin" }
        }`
    )
        i.fa(:class="`fa-${$data[$store.syncStatus].icon}`")
        span.ms-2(x-text="$store.syncStatus[0].toUpperCase() + $store.syncStatus.slice(1)")

    btn.btn-icon(type="button")
        i.fa.fa-ellipsis

block content
    #editor-container.flex.flex-col.gap-4.w-full.max-w-4xl.h-full.p-4.mx-auto(
        x-data="{ note: {} }",
        x-init=`
            note = $store.notes.get($params.id);

            quill = new Quill("#editor", {
                modules: {
                    toolbar: "#editor-toolbar"
                }
            });

            quill.root.setAttribute("placeholder",
                "Write something legendary! Or just your grocery list..."
            );

            const saveDelta = _.debounce(async () => {
                $store.syncStatus = "waiting";

                await $store.notes.update($params.id, {
                    content: JSON.stringify(quill.getContents().ops)
                });

                $store.syncStatus = "synced";
            }, 1000);
            
            quill.on("text-change", (delta, oldDelta, source) => {
                if (source === "user") {
                    saveDelta();
                }
            });

            quill.getModule("toolbar").addHandler("image", () => {
                const input = document.createElement("input");

                input.setAttribute("type", "file");
                input.setAttribute("accept", "image/*");

                input.click();

                input.onchange = async () => {
                    const filePath = await uploadImage(input.files[0]);

                    if (filePath) {
                        const range = quill.getSelection();
                        quill.insertEmbed(range.index, "image", API_URL + "/api/" + filePath);
                    }
                };
            });

            quill.setContents(note.content);

            quill.focus();
        `
    )
        #editor-toolbar-overflow.overflow-x-auto
            #editor-toolbar.w-max.flex.justify-center.items-center.p-2.mx-auto
                select.ql-header.form-input(class="!w-40 !mt-0")
                    each h in [1, 2, 3]
                        option(value=h) Heading #{h}
                    option(selected) Body

                .px-2

                -
                    const formats = {
                        bold: {}, italic: {}, underline: {},
                        strike: { icon: "strikethrough" }
                    }

                each [format, options] of Object.entries(formats)
                    button.btn-icon(type="button", class=`ql-${format}`)
                        i.fa(class=`fa-${options.icon || format}`)

                .px-2

                -
                    const aligns = {
                        "": { icon: "left" },
                        justify: {}, center: {}, right: {}
                    }

                each [align, options] of Object.entries(aligns)
                    button.ql-align.btn-icon(type="button", value=align)
                        i.fa(class=`fa-align-${options.icon || align}`)

                .px-2

                button.ql-image.btn-icon(type="button")
                    i.fa.fa-image

        #note-title
            input.form-input.text-2xl.font-bold.p-5(
                type="text",
                :value="note.title",
                placeholder="Note title",
                class="dark:!bg-gray-900",
                @input.debounce.2s=`$store.notes.update($params.id, {
                    title: $el.value
                })`
            )

        #editor