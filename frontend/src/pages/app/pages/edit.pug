extends ../layout

block script
    script(type="module").
        import Quill from "quill";
        import QuillCursors from "quill-cursors";

        import * as Y from "yjs";
        import { QuillBinding } from "y-quill";
        import { WebsocketProvider } from "y-websocket";

        Quill.register("modules/cursors", QuillCursors);

        function createQuill({ id, toolbarId, placeholder, note, name, color, onUpdate, onImageUpload }) {
            const quill = new Quill(`#${id}`, {
                modules: {
                    cursors: true,
                    toolbar: `#${toolbarId}`,
                    history: { userOnly: true }
                }
            });

            quill.root.setAttribute("placeholder", placeholder);

            quill.getModule("toolbar").addHandler("image", () => {
                const input = document.createElement("input");

                input.setAttribute("type", "file");
                input.setAttribute("accept", "image/*");

                input.click();

                input.onchange = async () => {
                    const file = input.files[0];
                    const filePath = await onImageUpload(file);

                    if (filePath) {
                        const range = quill.getSelection();
                        quill.insertEmbed(range.index, "image", filePath);
                        onUpdate(quill.getContents().ops);  // Updates the note after embedding the image
                    }
                }
            });

            if (note.shared_id || note.shared) {
                const ydoc = new Y.Doc();
                const provider = new WebsocketProvider(
                    process.env.WS_URL || "ws://0.0.0.0:4321", `sn_${note.id}`, ydoc
                );
                const awareness = provider.awareness;
                const ytext = ydoc.getText("quill");

                ytext.observe(() => {
                    if (note.shared || note.permission === "edit") {
                        onUpdate(ytext.toDelta());
                    }
                });

                provider.once("synced", () => {
                    if (ytext.length === 0) {
                        ytext.applyDelta(note.content);
                    }
                });

                if (note.permission === "read") {
                    quill.enable(false);
                }

                new QuillBinding(ytext, quill, awareness);

                awareness.setLocalStateField("user", { name, color });
            } else {
                quill.on("text-change", (delta, oldDelta, source) => {
                    if (source === "user") {
                        onUpdate(quill.getContents().ops);
                    }
                });

                quill.setContents(note.content);
            }

            return quill;
        }

        Alpine.data("editor", function () {
            return {
                unlocked: false,

                async init() {
                    if (!this.profile.email) {
                        await this.fetchProfile();
                    }

                    if (this.$store.notes.list.length === 0) {
                        await this.$store.notes.fetch();
                    }

                    const id = Number(this.$params.id);
                    this.note = this.$store.notes.get(id);

                    if (!this.note) {
                        setTimeout(() => this.$router.navigate("/"));
                        notyf.error("The note you're looking for isn't here, but we believe in you!");
                    } else if (this.note.password) {
                        // Next tick in order to show the password prompt properly
                        this.$nextTick(() => this.$dispatch("prompt-unlock", {
                            noteId: this.note.id,
                            onSuccess: () => this.createEditor(),
                            onClose: () => {
                                if (!this.unlocked) {
                                    this.$router.navigate("/");
                                }
                            }
                        }));
                    } else {
                        this.createEditor();
                    }
                },

                createEditor() {
                    const quill = createQuill({
                        id: "editor",
                        toolbarId: "editor-toolbar",
                        placeholder: "Write something legendary! Or just your grocery list...",
                        note: this.note,
                        name: this.profile.display_name,
                        color: `hsl(${emailToHue(this.profile.email)}, 70%, 50%)`,
                        onUpdate: (content) => {
                            this.setSyncStatus("pending");
                            this.$dispatch("update-note", content);
                        },
                        onImageUpload: async (file) => {
                            const path = await uploadImage(file);
                            return path ? `${API_URL}${path}` : null;
                        }
                    });

                    this.$el.querySelector(".ql-editor").className
                        = `ql-editor ${this.$store.notes.colors[this.note.note_color]}`;

                    this.unlocked = true;

                    quill.focus();
                },

                get noteExists() {
                    return this.note !== undefined;
                }
            }
        });

block header-left
    a.btn-icon(type="button", href="/")
        i.fa.fa-arrow-left

block header-right
    div(x-data=`{
        "ok": { label: "Synced", icon: "fa-circle-check", color: "text-green-600" },
        "pending": { label: "Unsynced", icon: "fa-triangle-exclamation", color: "text-amber-600" },
        "wait": { label: "Waiting...", icon: "fa-arrows-rotate fa-spin", color: "text-gray-500" },
        "error": { label: "Error", icon: "fa-circle-xmark", color: "text-rose-600" }
    }`)
        button.btn.hint--bottom.hint--no-arrow.hint--no-shadow.hint--rounded(
            type="button",
            id="sync-status-btn",
            @click="$dispatch('update-note')",
            :class="$data[syncStatus].color",
            :aria-label="`Last synced: ${lastSyncedTime}\nClick to sync manually`"
        )
            i.fa.fa-lg(:class="$data[syncStatus].icon")
            span.ms-2(x-text="$data[syncStatus].label")

block content
    //- HACK: Redirect to /refresh-editor/:id then back to /edit/:id to refresh
    //- the page. Solves the issue of toolbar not working.
    #editor-container.flex-1.flex(
        x-data="editor",
        @refresh-editor.window="$router.navigate(`/refresh-editor/${$params.id}`)",
        @update-note.window.debounce.2s=`
            setSyncStatus("wait");

            const success = await $store.notes.update($params.id, {
                content: JSON.stringify($event.detail)
            });

            setSyncStatus(success ? "ok" : "error");
        `
    )
        .flex.flex-col.gap-4.w-full.max-w-4xl.p-4.mx-auto(x-show="unlocked")
            #editor-toolbar.flex.flex-wrap.items-center.gap-y-2.p-2.mx-auto
                select.ql-header.form-input(class="!w-40 !mt-0")
                    each h in [1, 2, 3]
                        option(value=h) Heading #{h}
                    option(selected) Body

                .px-2

                -
                    const formats = {
                        bold: {}, italic: {}, underline: {},
                        strike: { icon: "strikethrough" }
                    }

                each [format, options] of Object.entries(formats)
                    button.btn-icon(type="button", class=`ql-${format}`)
                        i.fa(class=`fa-${options.icon || format}`)

                .px-2

                button.ql-list.btn-icon(type="button", value="bullet")
                    i.fa.fa-list-ul

                button.ql-list.btn-icon(type="button", value="ordered")
                    i.fa.fa-list-ol

                .px-2

                -
                    const aligns = {
                        "": { icon: "left" },
                        justify: {}, center: {}, right: {}
                    }

                each [align, options] of Object.entries(aligns)
                    button.ql-align.btn-icon(type="button", value=align)
                        i.fa(class=`fa-align-${options.icon || align}`)

                .px-2

                button.ql-link.btn-icon(type="button")
                    i.fa.fa-link

                button.ql-image.btn-icon(type="button")
                    i.fa.fa-image

                template(x-if="noteExists && !note.shared_id")
                    .flex.ps-4
                        button.btn-icon(type="button", @click="$dispatch('customize-note', note)")
                            i.fa.fa-gear

                        +note-more-options

            #note-title
                input.form-input.text-2xl.font-bold.p-5(
                    type="text",
                    :value="noteExists ? note.title : ''",
                    placeholder="Note title",
                    class="!bg-gray-300 dark:!bg-gray-900",
                    @input.debounce.2s=`$store.notes.update(
                        $params.id, { title: $el.value }
                    )`
                )

            #editor(
                class="!overflow-visible",
                :style="`font-size: ${noteExists ? note.font_size : '1rem'}`"
            )

        .flex-1.flex.justify-center.items-center(x-show="!unlocked")
            .spinner.scale-200

    +modal("note-theme", "Customize note")
        div(
            x-data="{ loading: false, id: -1, note_color: '', font_size: '' }",
            @customize-note.window=`
                id = $event.detail.id;
                note_color = $event.detail.note_color;
                font_size = $event.detail.font_size;

                $refs.fontSizeSlider.value = parseInt(font_size);

                $dispatch("show");
            `
        )
            form.flex.flex-col.gap-4(@submit.prevent=`
                await withLoading((v) => loading = v, () =>
                    $store.notes.changeSettings(
                        id, profile.id, note_color, font_size
                    )
                );

                if ($router.context.path.startsWith("/edit/")) {
                    $dispatch("refresh-editor");
                }

                $dispatch("close");
            `)
                p.opacity-70 Note color

                .flex.gap-2
                    template(x-for="color in ['gray', 'red', 'yellow', 'green', 'blue', 'purple']")
                        div    
                            input.hidden(type="radio", x-model="note_color", :id="`nc_${color}`", :value="color")

                            label.block.cursor-pointer.size-6.border-3.rounded-full(
                                :for="`nc_${color}`",
                                :class=`$store.notes.colors[color] + (
                                    note_color === color ? "" :
                                    " border-black/25 dark:border-white/25"
                                )`
                            )

                p.opacity-70 Font size

                p.flex.justify-center.items-center.h-20.p-4.bg-gray-200.rounded(
                    x-text="`New font size: ${font_size}`",
                    class="dark:bg-gray-800",
                    :style="`font-size: ${font_size}`"
                )

                .flex.items-center.gap-4
                    p.text-center.font-bold.w-8(class="text-[12px]") A

                    range-slider(
                        x-ref="fontSizeSlider",
                        min="12", max="24", step="2",
                        @input="font_size = `${$el.value}px`",
                        style="inline-size: 100%"
                    )

                    p.text-center.font-bold.w-8(class="text-[24px]") A

                .grid.gap-2.mt-2(class="sm:grid-cols-2")
                    button.btn.text-white.bg-primary(type="submit", :disabled="loading")
                        .spinner.me-2(:class="{ 'hidden': !loading }")
                        | Save changes

                    button.btn.text-primary.border(
                        type="button",
                        aria-label="Close modal",
                        data-micromodal-close
                    ) Close